## 메모리의 이해

메모리는 컴퓨터에서 정보를 일시적으로 저장하고 처리하기 위해 사용되는 장치입니다. 계층적으로 구성되어 속도와 용량의 균형을 이룹니다.

- 레지스터 → 캐시 → 주기억장치(RAM) → 보조기억장치(HDD/SSD) 순으로 속도는 느려지고 용량은 커집니다.

## 메모리의 이해 예제

예: CPU가 계산할 숫자를 RAM에서 가져와 처리한 뒤, 결과를 SSD에 저장하는 작업
- 프로그램 실행 시, 실행파일은 SSD → RAM으로 로드됨
- 연산에 필요한 데이터는 RAM → CPU 캐시로 이동

## 가상 메모리 관리

가상 메모리는 프로세스마다 독립된 메모리 공간을 제공하는 기술입니다. 물리 메모리보다 큰 주소 공간을 사용할 수 있게 해줍니다.

- 가상 주소 → 물리 주소 변환 (페이지 테이블 사용)
- 페이지(Page)와 프레임(Frame) 단위로 관리

## 가상 메모리 관리 예제

예: 2GB RAM밖에 없는 컴퓨터가 4GB짜리 프로그램을 실행할 때
- 실제로 필요한 부분만 RAM에 적재하고, 나머지는 디스크에 대기
- 필요 시 페이지를 교체하며 사용

## 페이지 교체

RAM에 여유 공간이 없을 때 새로운 페이지를 적재하기 위해 기존 페이지를 제거하는 방식입니다.

- FIFO, LRU, Optimal, Clock 방식 등

## 페이지 교체 예제

예: LRU 알고리즘
- 최근 3개의 페이지를 기억한다고 가정
- 페이지 요청 순서: 1 2 3 2 4 → 1이 가장 오래 사용되지 않았으므로 제거, 4를 넣음

## 파일

파일은 데이터를 저장하는 기본 단위입니다.
- 텍스트 파일, 바이너리 파일
- 속성: 이름, 경로, 권한, 생성/수정 시간 등

## 파일 예제

예: hello.txt라는 파일에 "안녕하세요"라는 문자열을 저장하고 불러오기
- 파일 경로: /home/user/hello.txt

## 디렉터리

파일을 계층적으로 관리하는 구조입니다. 디렉터리(또는 폴더)는 파일과 하위 디렉터리를 포함할 수 있습니다.

## 디렉터리 예제

예: /home/user/documents/ 디렉터리에 여러 문서 파일 저장
- 명령어: mkdir, cd, ls, rm

## 파일과 메모리

파일 입출력 과정에서 메모리는 데이터를 임시 저장하거나 속도를 높이기 위해 사용됩니다.
- 버퍼링, 캐싱, 메모리 맵핑(Memory Mapping) 기법 사용

## (부록) 데이터 표현

- 정수: 2의 보수
- 실수: 부동소수점 (IEEE 754)
- 문자: ASCII, UTF-8
- 비트/바이트 단위로 모든 정보 표현

## (부록) 스레드풀

- 미리 생성된 스레드 집합을 활용하여 다중 작업을 효율적으로 처리
- 서버, 병렬처리 시스템에 많이 사용

## (부록) 라운드로빈 모델

- 프로세스마다 일정 시간(Time Slice)씩 CPU를 순차적으로 할당
- 공정성 보장, 시분할 시스템에서 사용
